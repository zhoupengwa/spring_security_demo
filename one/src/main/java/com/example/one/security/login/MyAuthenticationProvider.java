package com.example.one.security.login;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.InternalAuthenticationServiceException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.stereotype.Component;import java.util.ArrayList;import java.util.Collection;/** * @author zhoupeng create on 2021/7/19 */@Componentpublic class MyAuthenticationProvider implements AuthenticationProvider {    @Override    public Authentication authenticate(Authentication auth) throws AuthenticationException {        String username = (String) auth.getPrincipal();        String password = (String) auth.getCredentials();        MyAuthenticationDetails details = (MyAuthenticationDetails) auth.getDetails();        String verifyCode = details.getVerifyCode();        try {            if ("admin".equals(username) && "123456".equals(password) && "1234".equals(verifyCode)) {                return new UsernamePasswordAuthenticationToken(username, password, getAuthorities(username));            } else {                throw new InternalAuthenticationServiceException("登陆验证失败");            }        } catch (Exception e) {            throw new BadCredentialsException("登录验证失败");        }    }    @Override    public boolean supports(Class<?> aClass) {        return false;    }    private Collection<? extends GrantedAuthority> getAuthorities(String username) {        Collection<GrantedAuthority> authorityCollection = new ArrayList<>();        authorityCollection.add(new SimpleGrantedAuthority("ROLE_ADMIN"));        return authorityCollection;    }}