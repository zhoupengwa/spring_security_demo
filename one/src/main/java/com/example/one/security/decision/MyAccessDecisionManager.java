package com.example.one.security.decision;import org.springframework.security.access.AccessDecisionManager;import org.springframework.security.access.AccessDeniedException;import org.springframework.security.access.ConfigAttribute;import org.springframework.security.authentication.AnonymousAuthenticationToken;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.InsufficientAuthenticationException;import org.springframework.security.core.Authentication;import org.springframework.security.core.GrantedAuthority;import org.springframework.stereotype.Component;import java.util.Collection;import java.util.Iterator;/** * @author zhoupeng create on 2021/7/17 */@Componentpublic class MyAccessDecisionManager implements AccessDecisionManager {    @Override    public void decide(Authentication authentication, Object object, Collection<ConfigAttribute> configAttributes) throws AccessDeniedException, InsufficientAuthenticationException {        //获取当前用户所拥有的角色        Collection<? extends GrantedAuthority> userAuthorities = authentication.getAuthorities();        //获取资源需要的角色，来自MySecurityMetadataSource        for (ConfigAttribute attribute : configAttributes) {            String role = attribute.getAttribute();            if ("ROLE_NONE".equals(role)) {                if (authentication instanceof AnonymousAuthenticationToken) {                    throw new BadCredentialsException("用户未登录");                } else {                    return;                }            }            //逐一进行角色匹配            for (GrantedAuthority authority : userAuthorities) {                if ("ROLE_ADMIN".equals(authority.getAuthority())) {                    //用户具有ROLE_ADMIN权限，则可以访问所有资源                    return;                }                if (authority.getAuthority().equals(role)) {                    //匹配成功就返回                    return;                }            }        }        //用户没有该角色        throw new AccessDeniedException("你没有访问" + object + "的权限!");    }    @Override    public boolean supports(ConfigAttribute configAttribute) {        return true;    }    @Override    public boolean supports(Class<?> aClass) {        return true;    }}