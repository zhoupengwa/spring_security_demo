package com.example.one.security.decision;import com.example.one.bean.MyResourceBean;import com.example.one.mapper.ResourceMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.ConfigAttribute;import org.springframework.security.access.SecurityConfig;import org.springframework.security.web.FilterInvocation;import org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;import org.springframework.stereotype.Component;import org.springframework.util.AntPathMatcher;import java.util.Collection;import java.util.List;/** * @author zhoupeng create on 2021/7/17 */@Componentpublic class MySecurityMetadataSource implements FilterInvocationSecurityMetadataSource {    @Autowired    private ResourceMapper resourceMapper;    //本方法返回：访问资源所需的角色集合    @Override    public Collection<ConfigAttribute> getAttributes(Object object) throws IllegalArgumentException {        AntPathMatcher antPathMatcher = new AntPathMatcher();        //获取需要访问的资源，即网址        String url = ((FilterInvocation) object).getRequestUrl();        List<MyResourceBean> myResourceBeans = resourceMapper.selectAllResource();        for (MyResourceBean resource : myResourceBeans) {            //地址匹配            if (antPathMatcher.match(resource.getUrl(), url) && resource.getRolesArray().length > 0) {                return SecurityConfig.createList(resource.getRolesArray());            }        }        //匹配不成功，返回特殊的ROLE_NONE        return SecurityConfig.createList("ROLE_NONE");    }    @Override    public Collection<ConfigAttribute> getAllConfigAttributes() {        return null;    }    @Override    public boolean supports(Class<?> clazz) {        return FilterInvocation.class.isAssignableFrom(clazz);    }}